# Production Database Configuration (Azure PostgreSQL)
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Connection pool configuration
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# Server configuration
server.port=${PORT:8080}
server.error.include-stacktrace=never
server.error.include-message=never

# Actuator endpoints for health checks
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized
management.health.db.enabled=true

# Security
spring.security.require-ssl=true

# Azure Speech Services
azure.speech.key=${AZURE_SPEECH_KEY}
azure.speech.region=${AZURE_SPEECH_REGION}
azure.speech.endpoint=https://${AZURE_SPEECH_REGION}.api.cognitive.microsoft.com

# Azure Storage
azure.storage.account-name=${AZURE_STORAGE_ACCOUNT_NAME}
azure.storage.account-key=${AZURE_STORAGE_ACCOUNT_KEY}
azure.storage.blob.container-name=${AZURE_STORAGE_CONTAINER_NAME:voice-files}

# Azure Key Vault
azure.keyvault.uri=${AZURE_KEYVAULT_URI}

# Stripe Configuration
stripe.api.key=${STRIPE_SECRET_KEY}
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET}

# Email Configuration (testmail.app)
spring.mail.host=mail.testmail.app
spring.mail.port=587
spring.mail.username=${TESTMAIL_USERNAME}
spring.mail.password=${TESTMAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.ssl.trust=mail.testmail.app

# JWT Configuration
jwt.secret=${JWT_SECRET}
jwt.expiration=86400000

# OAuth Configuration
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email,https://www.googleapis.com/auth/gmail.modify

spring.security.oauth2.client.registration.microsoft.client-id=${MICROSOFT_CLIENT_ID}
spring.security.oauth2.client.registration.microsoft.client-secret=${MICROSOFT_CLIENT_SECRET}
spring.security.oauth2.client.registration.microsoft.scope=openid,profile,email,https://graph.microsoft.com/mail.readwrite

spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET}

# Logging
logging.level.com.sonexa=INFO
logging.level.org.springframework.security=WARN
logging.level.org.hibernate.SQL=WARN
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# File upload limits
spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB

# CORS configuration
cors.allowed-origins=${FRONTEND_URL:https://sonexa-ai.vercel.app}
