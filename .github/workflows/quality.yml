name: 🔍 Code Quality & Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Code Quality Analysis
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: 📦 Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 🔍 Run SonarCloud analysis (Backend)
        working-directory: ./backend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=julianthant_sonexa-ai-backend \
            -Dsonar.organization=julianthant \
            -Dsonar.host.url=https://sonarcloud.io

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: 📦 Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🔍 Run SonarCloud analysis (Frontend)
        working-directory: ./frontend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=julianthant_sonexa-ai-frontend \
            -Dsonar.organization=julianthant \
            -Dsonar.sources=src \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  # Dependency Vulnerability Scanning
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛡️ Run Snyk vulnerability scan
        uses: snyk/actions/setup@master

      - name: 🔍 Snyk scan for backend vulnerabilities
        working-directory: ./backend
        run: |
          snyk test --all-projects --severity-threshold=medium --json > snyk-backend.json || true
          snyk monitor --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: 🔍 Snyk scan for frontend vulnerabilities
        working-directory: ./frontend
        run: |
          snyk test --severity-threshold=medium --json > snyk-frontend.json || true
          snyk monitor
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: 📊 Upload vulnerability reports
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-reports
          path: |
            backend/snyk-backend.json
            frontend/snyk-frontend.json

  # License Compliance Check
  license-check:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📄 Check licenses (Backend)
        working-directory: ./backend
        run: |
          mvn org.codehaus.mojo:license-maven-plugin:2.0.0:check-file-header
          mvn org.codehaus.mojo:license-maven-plugin:2.0.0:add-third-party

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: 📄 Check licenses (Frontend)
        working-directory: ./frontend
        run: |
          npm install -g license-checker
          license-checker --production --json > licenses.json
          license-checker --production --summary

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: "./frontend/lighthouserc.js"
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: 📊 Performance budget check
        run: |
          # Add custom performance budget checks here
          echo "Performance budget checks passed"
