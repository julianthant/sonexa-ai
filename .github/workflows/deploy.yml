name: 🚀 Deploy to Digital Ocean

on:
  push:
    branches: [main, deploy]
  pull_request:
    branches: [main]

env:
  REGISTRY: registry.digitalocean.com/sonexa-registry
  BACKEND_IMAGE: sonexa-backend
  FRONTEND_IMAGE: sonexa-frontend

jobs:
  # Test Backend
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 🧪 Run backend tests
        working-directory: ./backend
        run: |
          mvn clean test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/test_db
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/target/site/jacoco/jacoco.xml
          flags: backend

  # Test Frontend
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: 📦 Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🔍 Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: 🎨 Check TypeScript types
        working-directory: ./frontend
        run: npm run type-check

      - name: 🧪 Run frontend tests
        working-directory: ./frontend
        run: npm run test

      - name: 🏗️ Test build
        working-directory: ./frontend
        run: npm run build

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Run Snyk security scan
        uses: snyk/actions/setup@master

      - name: 🔍 Snyk test for backend
        working-directory: ./backend
        run: snyk test --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: 🔍 Snyk test for frontend
        working-directory: ./frontend
        run: snyk test --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Build and Deploy
  build-and-deploy:
    needs: [test-backend, test-frontend, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: 🏗️ Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🚀 Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            # Navigate to deployment directory
            cd /opt/sonexa-ai

            # Pull latest images
            docker pull ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
            docker pull ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest

            # Update docker-compose file with new image tags
            export IMAGE_TAG=latest
            export DOCKER_REGISTRY=${{ env.REGISTRY }}

            # Stop current containers
            docker-compose -f docker-compose.production.yml down

            # Start new containers
            docker-compose -f docker-compose.production.yml up -d

            # Clean up old images
            docker image prune -f

      - name: 📊 Send deployment notification to Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

      - name: 🔍 Health check
        run: |
          sleep 30
          curl -f https://api.sonexa.tech/actuator/health || exit 1
          curl -f https://sonexa.tech/health || exit 1

  # Database Migration (Production only)
  migrate-database:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🗃️ Run database migrations
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            cd /opt/sonexa-ai
            # Run Flyway migrations or Spring Boot auto-migration
            docker-compose -f docker-compose.production.yml exec -T backend \
              java -jar /app/app.jar --spring.jpa.hibernate.ddl-auto=validate --spring.flyway.migrate=true
