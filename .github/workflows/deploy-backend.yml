name: Deploy Backend to DigitalOcean

on:
  push:
    branches: [main, deploy]
    paths:
      - "backend/**"
      - ".github/workflows/deploy-backend.yml"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/deploy-backend.yml"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: sonexa-ai-backend

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./backend

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v4
  #       with:
  #         java-version: "17"
  #         distribution: "temurin"

  #     - name: Cache Maven dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.m2
  #         key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: ${{ runner.os }}-m2

  #     - name: Make Maven wrapper executable
  #       run: chmod +x ./mvnw

  #     - name: Run tests
  #       run: ./mvnw clean test

  #     - name: Generate test report
  #       uses: dorny/test-reporter@v1.9.1
  #       if: success() || failure()
  #       with:
  #         name: Maven Tests
  #         path: backend/target/surefire-reports/*.xml
  #         reporter: java-junit
  #         fail-on-error: false

  build-and-push:
    # needs: test  # Temporarily disabled
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy'
    permissions:
      contents: read
      packages: write
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy'
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          port: ${{ secrets.DO_PORT }}
          script: |
            # Navigate to deployment directory
            cd /opt/sonexa-ai

            # Pull latest changes
            git pull origin main

            # Login to Docker Hub
            echo '${{ secrets.DOCKER_PASSWORD }}' | docker login docker.io -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

            # Pull latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

            # Stop and remove old containers
            docker-compose -f backend/docker-compose.prod.yml down || true

            # Start new containers with environment variables
            DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }} \
            IMAGE_TAG=latest \
            DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
            DATABASE_USERNAME="${{ secrets.DATABASE_USERNAME }}" \
            DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
            GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
            GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            CORS_ALLOWED_ORIGINS="${{ secrets.CORS_ALLOWED_ORIGINS }}" \
            JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            docker-compose -f backend/docker-compose.prod.yml up -d postgres backend

            # Clean up old images
            docker image prune -af

            # Wait for services to be healthy
            echo "Waiting for services to start..."
            sleep 45

            # Check if backend is running
            docker ps | grep sonexa-backend || echo "Backend container not running"

            # Check backend logs
            docker-compose -f backend/docker-compose.prod.yml logs backend | tail -20

            # Verify deployment
            curl -f http://localhost:8080/actuator/health || exit 1

            echo "Deployment completed successfully!"
