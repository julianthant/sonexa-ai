name: Deploy Backend to DigitalOcean

on:
  push:
    branches: [main, deploy]
    paths:
      - "backend/**"
      - ".github/workflows/deploy-backend.yml"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/deploy-backend.yml"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: sonexa-ai-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy'
    permissions:
      contents: read
      packages: write
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy'
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          port: ${{ secrets.DO_PORT }}
          script: |
            # Navigate to deployment directory
            cd /opt/sonexa-ai

            # Pull latest changes
            git pull origin main

            # Login to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login docker.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Pull latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

            # Create .env file with all environment variables
            cd backend
            cat > .env << EOL
            DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
            IMAGE_TAG=latest
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            EOL

            # Stop and remove old containers
            docker-compose -f docker-compose.prod.yml down || true

            # Start new containers using the .env file
            docker-compose -f docker-compose.prod.yml --env-file .env up -d postgres backend

            # Clean up old images
            docker image prune -af

            # Wait for services to be healthy
            echo "Waiting for database to initialize..."
            sleep 20

            # Check if postgres is ready
            docker-compose -f docker-compose.prod.yml exec postgres pg_isready -U "$DATABASE_USERNAME" -d "$DATABASE_NAME" || echo "Database not ready yet"

            echo "Waiting for backend service to start..."
            sleep 60

            # Check if backend is running
            docker ps | grep sonexa-backend || echo "Backend container not running"

            # Check backend logs
            docker-compose -f docker-compose.prod.yml logs backend | tail -20

            # Verify deployment
            echo "Checking backend health..."
            for i in {1..5}; do
              if curl -f http://localhost:8080/actuator/health; then
                echo "Backend health check successful!"
                echo "Deployment completed successfully!"
                exit 0
              else
                echo "Health check attempt $i failed, retrying in 10 seconds..."
                sleep 10
              fi
            done

            echo "Backend health check failed after multiple attempts"
            docker-compose -f docker-compose.prod.yml logs backend --tail 50
            exit 1
