name: Build and deploy Sonexa Backend to DigitalOcean
run-name: ${{ github.actor }} is deploying to production server ðŸš€

on:
  push:
    branches:
      - main
    paths:
      - "backend/**"
      - ".github/workflows/deploy-backend.yml"
  workflow_dispatch:

jobs:
  build-and-publish:
    name: build and publish image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login docker.io -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Create .env file
        run: |
          cd backend
          cat > .env << EOL
          DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/sonexa-ai-backend
          IMAGE_TAG=latest
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          SSL_ENABLED=${{ secrets.SSL_ENABLED || 'false' }}
          EOL
          echo "Environment file created"
          # Show non-sensitive variables
          grep -v "PASSWORD\|SECRET" .env || true

      - name: Build and Publish
        run: |
          cd backend
          docker compose -f docker-compose.prod.yml build --no-cache
          docker compose -f docker-compose.prod.yml push

  deployment:
    needs: build-and-publish
    name: deploy image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: rsync docker compose config and files
        uses: burnett01/rsync-deployments@5.2.1
        with:
          switches: -avzr --delete
          path: backend/
          remote_path: sonexa-ai
          remote_host: ${{ secrets.DO_HOST }}
          remote_user: ${{ secrets.DO_USERNAME }}
          remote_key: ${{ secrets.DO_SSH_KEY }}

      - name: connect and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          port: ${{ secrets.DO_PORT }}
          script: |
            # Clean up old resources
            docker system prune -a --volumes -f

            # Create network if it doesn't exist
            docker network create sonexa-network || true

            # Navigate to deployment directory
            cd sonexa-ai

            # Create environment file
            cat > .env << EOL
            DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/sonexa-ai-backend
            IMAGE_TAG=latest
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            SSL_ENABLED=${{ secrets.SSL_ENABLED || 'false' }}
            EOL

            # Login to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login docker.io --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Pull latest images
            docker compose -f docker-compose.prod.yml pull

            # Start services
            docker compose -f docker-compose.prod.yml --env-file .env up -d

            # Wait for services to be ready
            echo "Waiting for services to start..."
            sleep 30

            # Check service status
            docker ps

            # Verify backend health
            for i in {1..10}; do
              if curl -s -f http://localhost:8080/actuator/health | grep -q "UP"; then
                echo "Backend health check successful!"
                echo "Deployment completed successfully!"
                exit 0
              else
                echo "Health check attempt $i failed, retrying in 10 seconds..."
                sleep 10
              fi
            done

            echo "Deployment verification failed"
            docker compose -f docker-compose.prod.yml logs --tail 50
            exit 1
